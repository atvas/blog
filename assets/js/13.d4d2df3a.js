(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{385:function(v,_,p){"use strict";p.r(_);var t=p(46),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,p=v._self._c||_;return p("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[p("h2",{attrs:{id:"js-基础语法-重点总结"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#js-基础语法-重点总结"}},[v._v("#")]),v._v(" JS 基础语法(重点总结)")]),v._v(" "),p("h2",{attrs:{id:"变量"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[v._v("#")]),v._v(" 变量")]),v._v(" "),p("p",[v._v("变量即一个带名字的用来存储数据的内存空间，数据可以存储到变量中，也可以从变量中取出数")]),v._v(" "),p("h2",{attrs:{id:"_1-变量的声明以及注意点"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量的声明以及注意点"}},[v._v("#")]),v._v(" 1.变量的声明以及注意点:")]),v._v(" "),p("p",[v._v("JavaScript 是一种弱类型语言，在声明变量时不需要指明数据类型，直接用 var 修饰符进行")]),v._v(" "),p("p",[v._v("注意:")]),v._v(" "),p("p",[v._v("1）若只声明而没有赋值，则该变量的值为undefined")]),v._v(" "),p("p",[v._v("2）变量要有定义才能使用，若变量未声明就使用，JavaScript 会报错，告诉你变量未定义")]),v._v(" "),p("p",[v._v("3）可以在同一条 var 命令中声明多个变量")]),v._v(" "),p("p",[v._v("4）若使用 var 重新声明一个已经存在的变量，是无效的")]),v._v(" "),p("p",[v._v("5）若使用 var 重新声明一个已经存在的变量且赋值，则会覆盖掉前面的值")]),v._v(" "),p("p",[v._v("6）JavaScript 是一种动态类型、弱类型语言，也就是说，变量的类型没有限制，可以赋予各种类型的值")]),v._v(" "),p("h2",{attrs:{id:"_2-数据类型"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型"}},[v._v("#")]),v._v(" 2.数据类型")]),v._v(" "),p("p",[v._v("虽说 JS 是弱类型语言，变量没有类型，但数据本身是有类型的。针对不同的类型，我们可以进行不同的操作。JavaScript 中有 6 种数据类型，其中有五种简单的数据类型：Undefined、Null、布尔、数值,字符串,Object.")]),v._v(" "),p("p",[v._v("Undefined: 表示“未定义”或不存在，即此处目前没有任何值")]),v._v(" "),p("p",[v._v("Null: 表示空缺，即此处应该有一个值，但目前为空")]),v._v(" "),p("p",[v._v("对象(object) : 各种值组成的集合")]),v._v(" "),p("p",[v._v("1)、对象（object）{name:”zhangsan”,age:”18”}")]),v._v(" "),p("p",[v._v("2)、数组（array）[1,2,3]")]),v._v(" "),p("p",[v._v("3)、函数（function）function test() {}")]),v._v(" "),p("p",[p("strong",[v._v("Undefined:")])]),v._v(" "),p("p",[v._v("undefined 类型的值是 undefined。")]),v._v(" "),p("p",[v._v('undefined 是一个表示"无"的原始值，表示值不存在。')]),v._v(" "),p("p",[v._v("出现 undefined 的常见情况：")]),v._v(" "),p("p",[v._v("1）当声明了一个变量而没有初始化时，这个变量的值就是 undefined")]),v._v(" "),p("p",[v._v("2）调用函数时，该函数有形参，但未提供实参，则该参数为 undefined。")]),v._v(" "),p("p",[v._v("3）函数没有返回值时，默认返回 undefined。")]),v._v(" "),p("p",[p("strong",[v._v("null")])]),v._v(" "),p("p",[v._v("null 类型是只有一个值的数据类型，即特殊的值 null。它表示空值，即该处的值现在为空，它表示一个空对象引用。")]),v._v(" "),p("p",[v._v("使用 Null 类型值时注意以下几点：")]),v._v(" "),p("p",[v._v("1）使用 typeof 操作符测试 null 返回 object 字符串。")]),v._v(" "),p("p",[v._v("2）undefined 派生自 null，所以等值比较返回值是 true。所以，未初始化的变量 和赋值为null 的变量相等。")]),v._v(" "),p("p",[v._v("alert(undefined == null);")]),v._v(" "),p("p",[v._v("var box = null;//赋值为 null 的变量")]),v._v(" "),p("p",[v._v("var a;//未初始化的变量")]),v._v(" "),p("p",[v._v("alert(a == box);//两个的值相等")]),v._v(" "),p("p",[p("strong",[v._v("可以把undefined看作是空的变量，而null看作是空指针对象。")])]),v._v(" "),p("p",[p("strong",[v._v("布尔类型")])]),v._v(" "),p("p",[v._v("布尔类型有两个值：true、false。常用来做判断和循环的条件")]),v._v(" "),p("p",[p("strong",[v._v("数值型")])]),v._v(" "),p("p",[v._v("数值型包含两种数值：整型和浮点型。")]),v._v(" "),p("p",[v._v("1）所有数字（整型和浮点型）都是以 64 位浮点数形式储存。所以，JS 中 1 与 1.0 相等，而且 1 加上 1.0 得到的还是一个整数。浮点数最高精度是 17 位小数，由 于浮点数运算时可能不精确，尽量不要使用浮点数做判断。")]),v._v(" "),p("p",[v._v("2）在存储数值型数据时自动将可以转换为整型的浮点数值转为整型。")]),v._v(" "),p("p",[v._v("3）对于过大或过小的数值，可以使用科学计数法来表示")]),v._v(" "),p("p",[v._v("4）Infinity、-Infinity")]),v._v(" "),p("p",[v._v("超过了表数范围，出现 Infinity（正无穷）或者-Infinity（负无穷）")]),v._v(" "),p("p",[v._v("isFinite()函数可以确定是否超出范围：")]),v._v(" "),p("p",[v._v("true：没有超出；false：超出了。")]),v._v(" "),p("p",[p("strong",[v._v("NaN")])]),v._v(" "),p("p",[v._v("表示非数值（Not a Number），是一个特殊的值。")]),v._v(" "),p("p",[v._v("如：将字符串解析成数字出错的场合。")]),v._v(" "),p("p",[v._v('console.log(parseInt("abc"));//parseInt 方法将字符串解析为数值，但若无法解')]),v._v(" "),p("p",[v._v("析，返回 NaN")]),v._v(" "),p("p",[v._v("注意：")]),v._v(" "),p("p",[v._v("NaN 不等于任何值，包括它本身,因为它不是一个值")]),v._v(" "),p("p",[v._v("NaN 与任何数（包括它自己）的运算，得到的都是 NaN。")]),v._v(" "),p("p",[v._v('console.log("NaN 不等于任何值，包括它本身:" + (NaN === NaN));//false')]),v._v(" "),p("p",[v._v('console.log("NaN 与任何值运算都是:" + (NaN + 1));')]),v._v(" "),p("p",[v._v("isNaN()可以用来判断一个值是否为 NaN")]),v._v(" "),p("p",[v._v("true：不是数字；false：是数字")]),v._v(" "),p("p",[v._v("console.log(isNaN(12));//false")]),v._v(" "),p("p",[v._v('console.log(isNaN(("abc" + 1)));//true')]),v._v(" "),p("p",[p("strong",[v._v("字符串")])]),v._v(" "),p("p",[v._v("使用 "),p("strong",[v._v("' '")]),v._v(' 或 **" "**引起来，如：\'sxt\'，"good"。')]),v._v(" "),p("p",[v._v("使用加号’+’进行字符串的拼接，如：console.log('hello' + ' everybody');")]),v._v(" "),p("p",[v._v("1）转义符：记住常用即可。")]),v._v(" "),p("p",[v._v("\\0 代表没有内容的字符（\\u0000）")]),v._v(" "),p("p",[v._v("\\n 换行符（\\u000A）")]),v._v(" "),p("p",[v._v("\\t 制表符（\\u0009）")]),v._v(" "),p("p",[v._v("' 单引号（\\u0027）")]),v._v(" "),p("p",[v._v('" 双引号（\\u0022）')]),v._v(" "),p("p",[p("strong",[v._v("对象")])]),v._v(" "),p("p",[v._v("对象是一组数据和功能的集合。")]),v._v(" "),p("p",[v._v('typeof window // "object"')]),v._v(" "),p("p",[v._v('typeof {} // "object"')]),v._v(" "),p("p",[v._v('typeof [] // "object"')]),v._v(" "),p("p",[v._v('typeof null // "object"')]),v._v(" "),p("p",[v._v("说明：")]),v._v(" "),p("p",[v._v("{}：表示使用对象字面量方式定义的对象。空的大括号表示定义包含默认属性和 方法的对象")]),v._v(" "),p("p",[v._v("操作符 typeof:")]),v._v(" "),p("p",[v._v("typeof 操作符是用来检测数据类型。")]),v._v(" "),p("p",[v._v("说明：")]),v._v(" "),p("p",[v._v("1、typeof null 返回的是 object 字符串")]),v._v(" "),p("p",[v._v("2、函数不是数据类型，但是也可以使用 typeof 操作符返回字符串。typeof 操作 符可以操作变量也可以操作字面量。")]),v._v(" "),p("p",[v._v("注意：")]),v._v(" "),p("p",[v._v("函数在 JavaScript 中是对象，不是数据类型，所以使用 typeof 区分 function 和 object是有必要的.")]),v._v(" "),p("h2",{attrs:{id:"_3-类型转换"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_3-类型转换"}},[v._v("#")]),v._v(" 3.类型转换")]),v._v(" "),p("p",[v._v("很多时候，我们在进行数据运算或输出等操作时需要将数据在不同类型之间进行转 换，在JS 数据类型转方法主要有三种：利用 js 变量弱类型自动转换、转换函数、 强制类型转换.")]),v._v(" "),p("p",[p("strong",[v._v("自动类型转换")])]),v._v(" "),p("p",[v._v("undefined 自动转换成字符串是”undefined”,转成数字是NaN,转成布尔值是false")]),v._v(" "),p("p",[v._v("null 自动转换成字符串是”null”, 转成数字是0, 转成布尔值是false")]),v._v(" "),p("p",[v._v("“”(空字符串)自动转换成字符串是””, 转成数字是0, 转成布尔值是false")]),v._v(" "),p("p",[v._v("函数转换（String to Number）")]),v._v(" "),p("p",[v._v("JS 提供了 parseInt()和 parseFloat()两个全局转换函数。前者把值转换成整数，后者把值转换成浮点数。只有对 String 类型调用这些方法，这两个函数才能正确运行；对其他类型返回的都是 NaN(Not a Number)。")]),v._v(" "),p("p",[v._v("1.parseInt()在转换之前，首先会分析该字符串，判断位置为 0 处的字符，判断它是否是个有效数字，如果不是，则直接返回 NaN，不再继续，如果是则继续，直到找到非字符")]),v._v(" "),p("p",[v._v("2.parseFloat()方法与 parseInt()方法的处理方式相似，从位置 0 开始查看每个字符，直到找到第一个非有效的字符为止，然后把该字 符之前的字符串转换成数字。不过，对于这个方法来说，第一个出现的小数点是有效字符。如果有两个小数点，第二个小数点将被看作无效的，parseFloat()方法会把这个小数点之前的字符串转换成数字。")]),v._v(" "),p("p",[p("strong",[v._v("显示转换")])]),v._v(" "),p("p",[v._v("toString()函数将内容转换为字符串形式，其中 Number提供的toString()函数可以将数字以指定的进制转换为字符串，默认为十进制。xx.toString(进制数)")]),v._v(" "),p("p",[v._v("Number 还提供了 toFixed()函数将根据小数点后指定位数将数字转为字符串，四舍五入")]),v._v(" "),p("p",[p("strong",[v._v("强制转换")])]),v._v(" "),p("p",[v._v("JS 为 Number、Boolean、String 对象提供了构造方法，用于强制转换其他类型的数据。此时操作的是整个数据，而不是部分")]),v._v(" "),p("p",[v._v("console.log(Number(new Object()));")]),v._v(" "),p("p",[v._v("console.log(Number(new Array()));// 结果是0,代表一个空数组,也是空对象")]),v._v(" "),p("h2",{attrs:{id:"_4-运算符"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_4-运算符"}},[v._v("#")]),v._v(" 4.运算符")]),v._v(" "),p("p",[v._v("% 求余数 x=y%2 x=1")]),v._v(" "),p("p",[v._v("%= 例: x%=y -------\x3e x= x%y")]),v._v(" "),p("p",[v._v("== 等于")]),v._v(" "),p("p",[v._v('=== 全等（值和类型） x===5 为 true；x==="5" 为 false')]),v._v(" "),p("p",[v._v("! not")]),v._v(" "),p("p",[v._v("三目运算符 ?: 如果…否则… 例:3>5?3:5")]),v._v(" "),p("p",[v._v("typeof 操作符对数组（array）和对象（object）的显示结果都是 object，那么可以 利用instanceof 运算符，它可用于判断一个变量是否某个对象的实例")]),v._v(" "),p("h2",{attrs:{id:"_5-数组"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_5-数组"}},[v._v("#")]),v._v(" 5.数组")]),v._v(" "),p("p",[v._v("数组（array）是按次序排列的一组数据，每个值的位置都有编号（从 0 开始），整个数组用方括号表示。Js 中定义数组的三种方式如下（也可先声明再赋值）：")]),v._v(" "),p("p",[v._v("var arr=[值 1,值 2,值 3]; //隐式创建")]),v._v(" "),p("p",[v._v("var arr=new Array(值 1,值 2,值 3); //直接实例化")]),v._v(" "),p("p",[v._v("var array=new Array(size); //创建数组并指定")]),v._v(" "),p("p",[v._v("以上会一种即可.")]),v._v(" "),p("p",[v._v("数组的长度可以通过 length 属性来获取，并可以任意更改数组名.length数组名.length = 新长度.")]),v._v(" "),p("p",[v._v("数组中的每一个元素都可以被访问和修改，甚至是不存在的元素，无所谓")]),v._v(" "),p("p",[v._v("数组名[下标]数组名[下标] = 新值")]),v._v(" "),p("p",[p("strong",[v._v("数组的遍历")])]),v._v(" "),p("p",[v._v("数组的遍历即依次访问数组的每一个元素 ，JS 提供三种遍历数组的方式：")]),v._v(" "),p("p",[p("strong",[v._v("普通 for 循环遍历 不遍历属性")])]),v._v(" "),p("p",[v._v("for(var i=0; i<=数组.length-1; i++){")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("如：")]),v._v(" "),p("p",[v._v("for(var idx=0;idx<arr.length;idx++){")]),v._v(" "),p("p",[v._v("console.log(arr[idx]);")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[p("strong",[v._v("for…in 不遍历索引中的 undefined")])]),v._v(" "),p("p",[v._v("for(var 下标(名称任意) in 数组名){")]),v._v(" "),p("p",[v._v("数组名[下标]是获取元素")]),v._v(" "),p("p",[v._v("} //下标(名称任意)")]),v._v(" "),p("p",[v._v("如：")]),v._v(" "),p("p",[v._v("for(var idx in arr){")]),v._v(" "),p("p",[v._v("console.log(arr[idx]);")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[p("strong",[v._v("forEach 不遍历属性和索引中的 undefined")])]),v._v(" "),p("p",[v._v("数组名.forEach(function(element,index){")]),v._v(" "),p("p",[v._v("}) // element(名称任意)：元素，index(名称任意)：下标")]),v._v(" "),p("p",[v._v("如：")]),v._v(" "),p("p",[v._v("arr.forEach(function(elem,idx){")]),v._v(" "),p("p",[v._v('console.log(idx+"--\x3e"+elem);')]),v._v(" "),p("p",[v._v("});")]),v._v(" "),p("p",[p("strong",[v._v("数组提供的操作方法")])]),v._v(" "),p("p",[v._v("Array 对象为我们提供了一些方法，可以很方便地操作数组:")]),v._v(" "),p("p",[v._v("push 添加元素到最后")]),v._v(" "),p("p",[v._v("join 数组转成字符串")]),v._v(" "),p("p",[v._v('var str = arr2.join("*");用括号内的内容进行字符串连接')]),v._v(" "),p("p",[v._v("indexOf 数组元素索引")]),v._v(" "),p("h2",{attrs:{id:"_6函数"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_6函数"}},[v._v("#")]),v._v(" 6函数")]),v._v(" "),p("p",[v._v("函数，即方法。就是一段预先设置的功能代码块，可以反复调用，根据输入参数的不同，")]),v._v(" "),p("p",[v._v("返回不同的值。函数也是对象")]),v._v(" "),p("p",[p("strong",[v._v("1.函数的声明")])]),v._v(" "),p("p",[p("strong",[v._v("直接声明:")])]),v._v(" "),p("p",[v._v("function 函数名([参数列表]){}")]),v._v(" "),p("p",[v._v("例如：")]),v._v(" "),p("p",[v._v("function foo(){")]),v._v(" "),p("p",[v._v("console.log(1);")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("foo();")]),v._v(" "),p("p",[v._v("该种方式定义的函数具有声明提升的")]),v._v(" "),p("p",[p("strong",[v._v("函数定义表达式:")])]),v._v(" "),p("p",[v._v("以表达式方式定义的函数，函数的名称是可以不需要")]),v._v(" "),p("p",[v._v("var 变量名 = function ([参数列表]) {}")]),v._v(" "),p("p",[v._v("变量名()")]),v._v(" "),p("p",[v._v("这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式，因为 赋值语句的等号右侧只能放表达式。")]),v._v(" "),p("p",[v._v("注意：1.js 中的函数没有重载，同名的函数，会被后面的函数覆盖。")]),v._v(" "),p("p",[v._v("2.js 中允许有不定数目的参数，后面介绍 arguments\\")]),v._v(" "),p("p",[p("strong",[v._v("2.函数的参数、调用和 return 语句")])]),v._v(" "),p("p",[v._v("参数")]),v._v(" "),p("p",[v._v("函数运行的时候，有时需要提供外部数据，不同的外部数据会得到不同的结果，这种外部数据就叫参数，定义时的参数称为形参，调用时的参数称为实参")]),v._v(" "),p("p",[v._v(" 1 实参可以省略，那么对应形参为 undefined")]),v._v(" "),p("p",[v._v(" 2若函数形参同名（一般不会这么干）：在使用时以最后一个值为准。")]),v._v(" "),p("p",[v._v(" 3可以给参数默认值：当参数为特殊值时，可以赋予默认值。")]),v._v(" "),p("p",[v._v(" 4参数为值传递，传递副本 ；引用传递时传递地址，操作的是同一个对象。")]),v._v(" "),p("p",[p("strong",[v._v("3.函数调用的几种方式")])]),v._v(" "),p("p",[v._v("1.直接调用:函数名([实参]);")]),v._v(" "),p("p",[v._v("存在返回值可以变量接收，若接收无返回值函数则为 undefined。")]),v._v(" "),p("p",[v._v("2.函数调用")]),v._v(" "),p("p",[v._v("function add(a,b){ return a+b;}")]),v._v(" "),p("p",[v._v("var sum = add(1,2)")]),v._v(" "),p("p",[v._v("console.log(sum)")]),v._v(" "),p("p",[v._v("3.方法调用")]),v._v(" "),p("p",[v._v("var o = {")]),v._v(" "),p("p",[v._v("m: function(){")]),v._v(" "),p("p",[v._v("console.log(1);")]),v._v(" "),p("p",[v._v("}")]),v._v(" "),p("p",[v._v("};")]),v._v(" "),p("p",[v._v("o.m();")]),v._v(" "),p("p",[p("strong",[v._v("return 语句")])]),v._v(" "),p("p",[v._v("函数的执行可能会有返回值，需要使用 return 语句将结果返回。return 语句不是必需的，如果没有的话，该函数就不返回任何值，或者说返回 undefined。")]),v._v(" "),p("p",[v._v("作用：在没有返回值的方法中，用来结束方法。")]),v._v(" "),p("p",[v._v("有返回值的方法中，一个是用来结束方法，一个是将值带给调用者。")]),v._v(" "),p("h2",{attrs:{id:"_7作用域"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_7作用域"}},[v._v("#")]),v._v(" 7作用域")]),v._v(" "),p("p",[v._v("函数作用域：全局(global variable)和局部(local variable)")]),v._v(" "),p("p",[v._v("Js中只有函数有作用域")]),v._v(" "),p("ol",[p("li",[v._v("全局变量与局部变量同名问题")])]),v._v(" "),p("p",[p("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-d54d3c356f6554742040291c6fa644b2_720w.jpg",alt:"img"}})]),v._v(" "),p("ol",[p("li",[v._v("在函数中定义变量时，若没有加 var 关键字，使用之后自动变为全局")])]),v._v(" "),p("p",[p("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-dd04bdf371f9477e10ac40a52a68902a_720w.jpg",alt:"img"}})]),v._v(" "),p("ol",[p("li",[v._v("变量作用域")])]),v._v(" "),p("p",[p("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-90a72f9cd0a5e58f626438e3ef22ea08_720w.jpg",alt:"img"}})]),v._v(" "),p("h2",{attrs:{id:"_8-js内置对象"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_8-js内置对象"}},[v._v("#")]),v._v(" 8.JS内置对象")]),v._v(" "),p("p",[v._v("String:")]),v._v(" "),p("p",[p("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-ca57addaaea5a777bb7cf295b5297b9e_720w.jpg",alt:"img"}})]),v._v(" "),p("p",[v._v("Math:")]),v._v(" "),p("p",[v._v("Math.random()")]),v._v(" "),p("p",[v._v("Data:")]),v._v(" "),p("p",[p("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-c74547c475a99717637660963d153f35_720w.jpg",alt:"img"}})]),v._v(" "),p("h2",{attrs:{id:"_9-js对象"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#_9-js对象"}},[v._v("#")]),v._v(" 9.JS对象")]),v._v(" "),p("p",[v._v("对象是带有属性和方法的特殊数据类型。")]),v._v(" "),p("p",[v._v("简单说对象就是一种无序的数据集合，由若干个“键值对”（key-value）构成。通过 JavaScript 我们可以创建自己的对象。JavaScript 对象满足的这种”键值对”的格式我们成为JSON 格式，以后会见得非常多，即伟大的 JSON 对象]")]),v._v(" "),p("p",[p("strong",[v._v("对象的创建")])]),v._v(" "),p("p",[v._v("JS 创建自定义对象，主要通过三种方式："),p("strong",[v._v("字面量形式创建对象")]),v._v("、"),p("strong",[v._v("通过 new Object 对象创建")]),v._v(" 、"),p("strong",[v._v("通过 Object 对象的 create 方法创建对象")])]),v._v(" "),p("p",[p("strong",[p("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-1798641b1f9d81de9280907a85fe1fd8_720w.jpg",alt:"img"}})])]),v._v(" "),p("p",[p("strong",[v._v("字面量形式创建")])]),v._v(" "),p("p",[v._v("var 对象名 = {};//创建一个空的对象")]),v._v(" "),p("p",[v._v("var 对象名 = {键:值,键 2:值 2,...}")]),v._v(" "),p("p",[p("strong",[v._v("对象的序列化和反序列化")])]),v._v(" "),p("p",[v._v("序列化即将 JS 对象序列化为字符串，反序列化即将字符串反序列化为 JS 对象。JS 中通过调用 JSON 方法，可以将对象序列化成字符串，也可以将字符串反序列化成对象 。")]),v._v(" "),p("p",[p("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-2cc60ec3fdce1e621a8b1f93e2e7d2b7_720w.jpg",alt:"img"}})])])}),[],!1,null,null,null);_.default=a.exports}}]);